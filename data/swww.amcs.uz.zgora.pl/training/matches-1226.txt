3 - September 2004
14 - 2004
Codings and operators in two genetic algorithms for the leaf-constrained minimum spanning tree problem
Bryant A. Julstrom
The features of an evolutionary algorithm that most determine its performance are the coding by which its chromosomes represent candidate solutions to its target problem and the operators that act on that coding. Also, when a problem involves constraints, a coding that represents only valid solutions and operators that preserve that validity represent a smaller search space and result in a more effective search. Two genetic algorithms for the leaf-constrained minimum spanning tree problem illustrate these observations. Given a connected, weighted, undirected graph<em>G</em>with<em>n</em>vertices and a bound<em>ℓ</em>, this problem seeks a spanning tree on<em>G</em>with at least<em>ℓ</em>leaves and minimum weight among all such trees. A greedy heuristic for the problem begins with an unconstrained minimum spanning tree on<em>G</em>, then economically turns interior vertices into leaves until their number reaches<em>ℓ</em>. One genetic algorithm encodes candidate trees with Prüfer strings decoded via the Blob Code. The second GA uses strings of length<em>n – ℓ</em>that specify trees' interior vertices. Both GAs apply operators that generate only valid chromosomes. The latter represents and searches a much smaller space. In tests on 65 instances of the problem, both Euclidean and with weights chosen randomly, the Blob-Coded GA cannot compete with the greedy heuristic, but the subsetcoded GA consistently identifies leaf-constrained spanning trees of lower weight than the greedy heuristic does, particularly on the random instances.
evolutionary codings, leaf-constrained spanning trees, Prüfer strings, Blob Code, fixed-length subsets
